datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String              @id @default(cuid())
  name          String?
  email         String              @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  complaints    Complaint[]
  upvotes       ComplaintUpvote[]
  downvotes     ComplaintDownvote[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Comment   Comment[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Complaint {
  id             String              @id @default(cuid())
  proof          String
  upvotes        ComplaintUpvote[]
  downvotes      ComplaintDownvote[]
  description    String
  createdAt      DateTime            @default(now())
  location       String
  imageLongitude String
  imageLatitude  String
  report         String?
  imageDate      DateTime?
  updatedAt      DateTime            @updatedAt
  user           User?               @relation(fields: [userId], references: [id])
  userId         String?
  Comment        Comment[]
}

model ComplaintUpvote {
  id          String    @id @default(cuid())
  userId      String
  complaintId String
  user        User      @relation(fields: [userId], references: [id])
  complaint   Complaint @relation(fields: [complaintId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, complaintId]) // A user can upvote a complaint only once
}

model ComplaintDownvote {
  id          String    @id @default(cuid())
  userId      String
  complaintId String
  user        User      @relation(fields: [userId], references: [id])
  complaint   Complaint @relation(fields: [complaintId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, complaintId]) // A user can downvote a complaint only once
}

model Comment {
  id          String    @id @default(cuid())
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  complaintId String
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  complaint   Complaint @relation(fields: [complaintId], references: [id])

  @@index([complaintId])
}

model sos {
  id        String @id
  longitude Float
  latitude  Float
}
